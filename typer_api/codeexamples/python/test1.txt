import random

class Maze:
    def __init__(self, width, height):
        self.width = width
        self.height = height
        self.cells = [[Cell(x, y) for y in range(height)] for x in range(width)]

    def get_cell(self, x, y):
        if x < 0 or x >= self.width or y < 0 or y >= self.height:
            return None
        return self.cells[x][y]

    def __str__(self):
        output = ""
        for y in range(self.height):
            for x in range(self.width):
                output += str(self.cells[x][y])
            output += "\n"
        return output

class Solver:
    def __init__(self, maze):
        self.maze = maze
        self.current_cell = maze.get_cell(0, 0)
        self.path = []

    def solve(self):
        self.current_cell.visited = True
        self.path.append(self.current_cell)

        if self.current_cell.x == self.maze.width - 1 and self.current_cell.y == self.maze.height - 1:
            return True

        neighbors = []
        for direction in ["N", "E", "S", "W"]:
            neighbor = self.get_neighbor(direction)
            if neighbor is not None and not neighbor.visited and not self.current_cell.walls[direction]:
                neighbors.append(neighbor)

        if not neighbors:
            self.path.pop()
            if not self.path:
                return False
            self.current_cell = self.path[-1]
        else:
            neighbor = random.choice(neighbors)
            self.remove_wall(self.current_cell, neighbor, self.get)

class Cell:
    def __init__(self, x, y):
        self.x = x
        self.y = y
        self.walls = {"N": True, "E": True, "S": True, "W": True}
        self.visited = False

    def __str__(self):
        if self.walls["N"] and self.walls["E"] and self.walls["S"] and self.walls["W"]:
            return "ALL"
        elif self.walls["N"] and self.walls["E"] and self.walls["S"]:
            return "UP, RIGHT, DOWN"
        elif self.walls["N"] and self.walls["E"] and self.walls["W"]:
            return "UP, RIGHT, LEFT"
        elif self.walls["N"] and self.walls["S"] and self.walls["W"]:
            return "UP, DOWN, LEFT"
        elif self.walls["E"] and self.walls["S"] and self.walls["W"]:
            return "RIGHT, DOWN, LEFT"
        elif self.walls["N"] and self.walls["E"]:
            return "UP, RIGHT"
        elif self.walls["N"] and self.walls["S"]:
            return "UP, DOWN"
        elif self.walls["N"] and self.walls["W"]:
            return "UP, LEFT"
        elif self.walls["E"] and self.walls["S"]:
            return "RIGHT, DOWN"
        elif self.walls["E"] and self.walls["W"]:
            return "RIGHT, LEFT"
        elif self.walls["S"] and self.walls["W"]:
            return "DOWN, LEFT"
        elif self.walls["N"]:
            return "UP"
        elif self.walls["E"]:
            return "RIGHT"
        elif self.walls["S"]:
            return "DOWN"
        elif self.walls["W"]:
            return "LEFT"