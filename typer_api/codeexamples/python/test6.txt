import numpy as np
import pandas as pd
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.tree import DecisionTreeClassifier
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score, confusion_matrix

# Load data
data = pd.read_csv("data.csv")

# Preprocess data
X = data.drop(["id", "diagnosis", "Unnamed: 32"], axis=1)
y = data["diagnosis"].map({"M": 1, "B": 0})

# Split data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Standardize data
scaler = StandardScaler()
X_train = scaler.fit_transform(X_train)
X_test = scaler.transform(X_test)

# Train logistic regression model
lr = LogisticRegression()
lr.fit(X_train, y_train)

# Train decision tree model
dt = DecisionTreeClassifier()
dt.fit(X_train, y_train)

# Train random forest model
rf = RandomForestClassifier()
rf.fit(X_train, y_train)

# Evaluate models
lr_acc = accuracy_score(y_test, lr.predict(X_test))
dt_acc = accuracy_score(y_test, dt.predict(X_test))
rf_acc = accuracy_score(y_test, rf.predict(X_test))

lr_cm = confusion_matrix(y_test, lr.predict(X_test))
dt_cm = confusion_matrix(y_test, dt.predict(X_test))
rf_cm = confusion_matrix(y_test, rf.predict(X_test))

# Print results
print("Logistic Regression:")
print(f"Accuracy: {lr_acc:.4f}")
print("Confusion Matrix:")
print(lr_cm)
print()

print("Decision Tree:")
print(f"Accuracy: {dt_acc:.4f}")
print("Confusion Matrix:")
print(dt_cm)
print()

print("Random Forest:")
print(f"Accuracy: {rf_acc:.4f}")
print("Confusion Matrix:")
print(rf_cm)
print()